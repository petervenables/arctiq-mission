# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT_NAME }}
  GKE_CLUSTER: online-boutique
  GKE_ZONE: us-central1

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ${{ github.workspace }}/microservices-demo/terraform

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: 'kubectl install'
      uses: yokawasa/action-setup-kube-tools@v0.9.2
      with:
        kubectl: '1.24.11'

    # Configure Workload Identity Federation and generate an access token.
    #- id: 'auth'
    #  name: 'Authenticate to Google Cloud'
    #  uses: 'google-github-actions/auth@v0'
    #  with:
    #    token_format: 'access_token'
    #    workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
    #    service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    # get the gcloud binary so we can do the GKE things.
    - name: 'Set up gcloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: gke-gcloud-auth-plugin

    # Create the terraform vars file for the demo
    - name: Create terraform vars file
      env:
        vars_file: ${{ github.workspace }}/microservices-demo/terraform/terraform.tfvars
      run: |
        touch ${{ env.vars_file }}
        echo 'gcp_project_id = "${{ env.PROJECT_ID }}"' > ${{ env.vars_file }}
        echo 'region         = "${{ env.GKE_ZONE }}"' >> ${{ env.vars_file }}
        echo 'memorystore    = false' >> ${{ env.vars_file }}

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}      

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

    - id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v1'
      with:
        cluster_name: '${{ env.PROJECT_ID }}'

    - name: Install Sysdig Monitor
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        kubectl create ns sysdig-agent
        helm repo add sysdig https://charts.sysdig.com
        helm repo update

        helm install sysdig-agent --namespace sysdig-agent \
          --set global.sysdig.accessKey=${{ secrets.SYSDIG_KEY }} \
          --set global.sysdig.region=us1 \
          --set global.clusterConfig.name=${{ env.PROJECT_ID }} \
          --set nodeAnalyzer.secure.vulnerabilityManagement.newEngineOnly=true \
          --set global.kspm.deploy=true \
          --set nodeAnalyzer.nodeAnalyzer.benchmarkRunner.deploy=false \
          --set agent.gke.autopilot=true \
          sysdig/sysdig-deploy

